{"version":3,"file":"uce-counter.js","sources":["../node_modules/umap/esm/index.js","../node_modules/uparser/esm/index.js","../node_modules/uarray/esm/index.js","../node_modules/uwire/esm/index.js","../node_modules/@ungap/create-content/esm/index.js","../node_modules/uhtml/esm/node.js","../node_modules/uhtml/esm/handlers.js","../node_modules/udomdiff/esm/index.js","../node_modules/uhandlers/esm/index.js","../node_modules/uhtml/esm/rabbit.js","../node_modules/uhtml/esm/index.js","../node_modules/uce/esm/index.js","../src/components/uce-counter/uce-counter.js"],"sourcesContent":["export default _ => ({\n  // About: get: _.get.bind(_)\n  // It looks like WebKit/Safari didn't optimize bind at all,\n  // so that using bind slows it down by 60%.\n  // Firefox and Chrome are just fine in both cases,\n  // so let's use the approach that works fast everywhere 👍\n  get: key => _.get(key),\n  set: (key, value) => (_.set(key, value), value)\n});\n","const attr = /([^\\s\\\\>\"'=]+)\\s*=\\s*(['\"]?)$/;\nconst empty = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;\nconst node = /<[a-z][^>]+$/i;\nconst notNode = />[^<>]*$/;\nconst selfClosing = /<([a-z]+[a-z0-9:._-]*)([^>]*?)(\\/>)/ig;\nconst trimEnd = /\\s+$/;\n\nconst isNode = (template, i) => (\n    0 < i-- && (\n    node.test(template[i]) || (\n      !notNode.test(template[i]) && isNode(template, i)\n    )\n  )\n);\n\nconst regular = (original, name, extra) => empty.test(name) ?\n                  original : `<${name}${extra.replace(trimEnd,'')}></${name}>`;\n\nexport default (template, prefix, svg) => {\n  const text = [];\n  const {length} = template;\n  for (let i = 1; i < length; i++) {\n    const chunk = template[i - 1];\n    text.push(attr.test(chunk) && isNode(template, i) ?\n      chunk.replace(\n        attr,\n        (_, $1, $2) => `${prefix}${i - 1}=${$2 || '\"'}${$1}${$2 ? '' : '\"'}`\n      ) :\n      `${chunk}<!--${prefix}${i - 1}-->`\n    );\n  }\n  text.push(template[length - 1]);\n  const output = text.join('').trim();\n  return svg ? output : output.replace(selfClosing, regular);\n};\n","const {isArray} = Array;\nconst {indexOf, slice} = [];\n\nexport {isArray, indexOf, slice};\n","import {slice} from 'uarray';\n\nconst ELEMENT_NODE = 1;\nconst nodeType = 111;\n\nconst remove = ({firstChild, lastChild}) => {\n  const range = document.createRange();\n  range.setStartAfter(firstChild);\n  range.setEndAfter(lastChild);\n  range.deleteContents();\n  return firstChild;\n};\n\nexport const diffable = (node, operation) => node.nodeType === nodeType ?\n  ((1 / operation) < 0 ?\n    (operation ? remove(node) : node.lastChild) :\n    (operation ? node.valueOf() : node.firstChild)) :\n  node\n;\n\nexport const persistent = fragment => {\n  const {childNodes} = fragment;\n  const {length} = childNodes;\n  // If the fragment has no content\n  // it should return undefined and break\n  if (length < 2)\n    return childNodes[0];\n  const nodes = slice.call(childNodes, 0);\n  const firstChild = nodes[0];\n  const lastChild = nodes[length - 1];\n  return {\n    ELEMENT_NODE,\n    nodeType,\n    firstChild,\n    lastChild,\n    valueOf() {\n      if (childNodes.length !== length) {\n        let i = 0;\n        while (i < length)\n          fragment.appendChild(nodes[i++]);\n      }\n      return fragment;\n    }\n  };\n};\n","/*! (c) Andrea Giammarchi - ISC */\nvar createContent = (function (document) {'use strict';\n  var FRAGMENT = 'fragment';\n  var TEMPLATE = 'template';\n  var HAS_CONTENT = 'content' in create(TEMPLATE);\n\n  var createHTML = HAS_CONTENT ?\n    function (html) {\n      var template = create(TEMPLATE);\n      template.innerHTML = html;\n      return template.content;\n    } :\n    function (html) {\n      var content = create(FRAGMENT);\n      var template = create(TEMPLATE);\n      var childNodes = null;\n      if (/^[^\\S]*?<(col(?:group)?|t(?:head|body|foot|r|d|h))/i.test(html)) {\n        var selector = RegExp.$1;\n        template.innerHTML = '<table>' + html + '</table>';\n        childNodes = template.querySelectorAll(selector);\n      } else {\n        template.innerHTML = html;\n        childNodes = template.childNodes;\n      }\n      append(content, childNodes);\n      return content;\n    };\n\n  return function createContent(markup, type) {\n    return (type === 'svg' ? createSVG : createHTML)(markup);\n  };\n\n  function append(root, childNodes) {\n    var length = childNodes.length;\n    while (length--)\n      root.appendChild(childNodes[0]);\n  }\n\n  function create(element) {\n    return element === FRAGMENT ?\n      document.createDocumentFragment() :\n      document.createElementNS('http://www.w3.org/1999/xhtml', element);\n  }\n\n  // it could use createElementNS when hasNode is there\n  // but this fallback is equally fast and easier to maintain\n  // it is also battle tested already in all IE\n  function createSVG(svg) {\n    var content = create(FRAGMENT);\n    var template = create('div');\n    template.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + svg + '</svg>';\n    append(content, template.firstChild.childNodes);\n    return content;\n  }\n\n}(document));\nexport default createContent;\n","import createContent from '@ungap/create-content';\nimport {indexOf} from 'uarray';\n\n// from a generic path, retrieves the exact targeted node\nexport const reducePath = ({childNodes}, i) => childNodes[i];\n\n// from a fragment container, create an array of indexes\n// related to its child nodes, so that it's possible\n// to retrieve later on exact node via reducePath\nexport const createPath = node => {\n  const path = [];\n  let {parentNode} = node;\n  while (parentNode) {\n    path.push(indexOf.call(parentNode.childNodes, node));\n    node = parentNode;\n    parentNode = node.parentNode;\n  }\n  return path;\n};\n\nconst {createTreeWalker, importNode} = document;\nexport {createTreeWalker, importNode};\n\n// this \"hack\" tells the library if the browser is IE11 or old Edge\nconst IE = importNode.length != 1;\n\n// IE11 and old Edge discard empty nodes when cloning, potentially\n// resulting in broken paths to find updates. The workaround here\n// is to import once, upfront, the fragment that will be cloned\n// later on, so that paths are retrieved from one already parsed,\n// hence without missing child nodes once re-cloned.\nexport const createFragment = IE ?\n  (text, type) => importNode.call(\n    document,\n    createContent(text, type),\n    true\n  ) :\n  createContent;\n\n// IE11 and old Edge have a different createTreeWalker signature that\n// has been deprecated in other browsers. This export is needed only\n// to guarantee the TreeWalker doesn't show warnings and, ultimately, works\nexport const createWalker = IE ?\n  fragment => createTreeWalker.call(document, fragment, 1 | 128, null, false) :\n  fragment => createTreeWalker.call(document, fragment, 1 | 128);\n","import {isArray, slice} from 'uarray';\nimport udomdiff from 'udomdiff';\nimport {aria, attribute, data, event, ref, setter, text} from 'uhandlers';\nimport {diffable} from 'uwire';\n\nimport {reducePath} from './node.js';\n\n// this helper avoid code bloat around handleAnything() callback\nconst diff = (comment, oldNodes, newNodes) => udomdiff(\n  comment.parentNode,\n  // TODO: there is a possible edge case where a node has been\n  //       removed manually, or it was a keyed one, attached\n  //       to a shared reference between renders.\n  //       In this case udomdiff might fail at removing such node\n  //       as its parent won't be the expected one.\n  //       The best way to avoid this issue is to filter oldNodes\n  //       in search of those not live, or not in the current parent\n  //       anymore, but this would require both a change to uwire,\n  //       exposing a parentNode from the firstChild, as example,\n  //       but also a filter per each diff that should exclude nodes\n  //       that are not in there, penalizing performance quite a lot.\n  //       As this has been also a potential issue with domdiff,\n  //       and both lighterhtml and hyperHTML might fail with this\n  //       very specific edge case, I might as well document this possible\n  //       \"diffing shenanigan\" and call it a day.\n  oldNodes,\n  newNodes,\n  diffable,\n  comment\n);\n\n// if an interpolation represents a comment, the whole\n// diffing will be related to such comment.\n// This helper is in charge of understanding how the new\n// content for such interpolation/hole should be updated\nconst handleAnything = comment => {\n  let oldValue, text, nodes = [];\n  const anyContent = newValue => {\n    switch (typeof newValue) {\n      // primitives are handled as text content\n      case 'string':\n      case 'number':\n      case 'boolean':\n        if (oldValue !== newValue) {\n          oldValue = newValue;\n          if (text)\n            text.textContent = newValue;\n          else\n            text = document.createTextNode(newValue);\n          nodes = diff(comment, nodes, [text]);\n        }\n        break;\n      // null, and undefined are used to cleanup previous content\n      case 'object':\n      case 'undefined':\n        if (newValue == null) {\n          if (oldValue != newValue) {\n            oldValue = newValue;\n            nodes = diff(comment, nodes, []);\n          }\n          break;\n        }\n        // arrays and nodes have a special treatment\n        if (isArray(newValue)) {\n          oldValue = newValue;\n          // arrays can be used to cleanup, if empty\n          if (newValue.length === 0)\n            nodes = diff(comment, nodes, []);\n          // or diffed, if these contains nodes or \"wires\"\n          else if (typeof newValue[0] === 'object')\n            nodes = diff(comment, nodes, newValue);\n          // in all other cases the content is stringified as is\n          else\n            anyContent(String(newValue));\n          break;\n        }\n        // if the new value is a DOM node, or a wire, and it's\n        // different from the one already live, then it's diffed.\n        // if the node is a fragment, it's appended once via its childNodes\n        // There is no `else` here, meaning if the content\n        // is not expected one, nothing happens, as easy as that.\n        if ('ELEMENT_NODE' in newValue && oldValue !== newValue) {\n          oldValue = newValue;\n          nodes = diff(\n            comment,\n            nodes,\n            newValue.nodeType === 11 ?\n              slice.call(newValue.childNodes) :\n              [newValue]\n          );\n        }\n    }\n  };\n  return anyContent;\n};\n\n// attributes can be:\n//  * ref=${...}      for hooks and other purposes\n//  * aria=${...}     for aria attributes\n//  * data=${...}     for dataset related attributes\n//  * .setter=${...}  for Custom Elements setters or nodes with setters\n//                    such as buttons, details, options, select, etc\n//  * onevent=${...}  to automatically handle event listeners\n//  * generic=${...}  to handle an attribute just like an attribute\nconst handleAttribute = (node, name) => {\n  if (name === 'ref')\n    return ref(node);\n\n  if (name === 'aria')\n    return aria(node);\n\n  if (name === 'data')\n    return data(node);\n\n  if (name.slice(0, 1) === '.')\n    return setter(node, name.slice(1));\n\n  if (name.slice(0, 2) === 'on')\n    return event(node, name);\n\n  return attribute(node, name);\n};\n\n// each mapped update carries the update type and its path\n// the type is either node, attribute, or text, while\n// the path is how to retrieve the related node to update.\n// In the attribute case, the attribute name is also carried along.\nexport function handlers(options) {\n  const {type, path} = options;\n  const node = path.reduceRight(reducePath, this);\n  return type === 'node' ?\n    handleAnything(node) :\n    (type === 'attr' ?\n      handleAttribute(node, options.name) :\n      text(node));\n};\n","/**\n * ISC License\n *\n * Copyright (c) 2020, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * @param {Node} parentNode The container where children live\n * @param {Node[]} a The list of current/live children\n * @param {Node[]} b The list of future children\n * @param {(entry: Node, action: number) => Node} get\n * The callback invoked per each entry related DOM operation.\n * @param {Node} [before] The optional node used as anchor to insert before.\n * @returns {Node[]} The same list of future children.\n */\nexport default (parentNode, a, b, get, before) => {\n  const bLength = b.length;\n  let aEnd = a.length;\n  let bEnd = bLength;\n  let aStart = 0;\n  let bStart = 0;\n  let map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    // append head, tail, or nodes in between: fast path\n    if (aEnd === aStart) {\n      // we could be in a situation where the rest of nodes that\n      // need to be added are not at the end, and in such case\n      // the node to `insertBefore`, if the index is more than 0\n      // must be retrieved, otherwise it's gonna be the first item.\n      const node = bEnd < bLength ?\n        (bStart ?\n          (get(b[bStart - 1], -0).nextSibling) :\n          get(b[bEnd - bStart], 0)) :\n        before;\n      while (bStart < bEnd)\n        parentNode.insertBefore(get(b[bStart++], 1), node);\n    }\n    // remove head or tail: fast path\n    else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        // remove the node only if it's unknown or not live\n        if (!map || !map.has(a[aStart]))\n          parentNode.removeChild(get(a[aStart], -1));\n        aStart++;\n      }\n    }\n    // same node: fast path\n    else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    }\n    // same tail: fast path\n    else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    }\n    // The once here single last swap \"fast path\" has been removed in v1.1.0\n    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85\n    // reverse swap: also fast path\n    else if (\n      a[aStart] === b[bEnd - 1] &&\n      b[bStart] === a[aEnd - 1]\n    ) {\n      // this is a \"shrink\" operation that could happen in these cases:\n      // [1, 2, 3, 4, 5]\n      // [1, 4, 3, 2, 5]\n      // or asymmetric too\n      // [1, 2, 3, 4, 5]\n      // [1, 2, 3, 5, 6, 4]\n      const node = get(a[--aEnd], -1).nextSibling;\n      parentNode.insertBefore(\n        get(b[bStart++], 1),\n        get(a[aStart++], -1).nextSibling\n      );\n      parentNode.insertBefore(get(b[--bEnd], 1), node);\n      // mark the future index as identical (yeah, it's dirty, but cheap 👍)\n      // The main reason to do this, is that when a[aEnd] will be reached,\n      // the loop will likely be on the fast path, as identical to b[bEnd].\n      // In the best case scenario, the next loop will skip the tail,\n      // but in the worst one, this node will be considered as already\n      // processed, bailing out pretty quickly from the map index check\n      a[aEnd] = b[bEnd];\n    }\n    // map based fallback, \"slow\" path\n    else {\n      // the map requires an O(bEnd - bStart) operation once\n      // to store all future nodes indexes for later purposes.\n      // In the worst case scenario, this is a full O(N) cost,\n      // and such scenario happens at least when all nodes are different,\n      // but also if both first and last items of the lists are different\n      if (!map) {\n        map = new Map;\n        let i = bStart;\n        while (i < bEnd)\n          map.set(b[i], i++);\n      }\n      // if it's a future node, hence it needs some handling\n      if (map.has(a[aStart])) {\n        // grab the index of such node, 'cause it might have been processed\n        const index = map.get(a[aStart]);\n        // if it's not already processed, look on demand for the next LCS\n        if (bStart < index && index < bEnd) {\n          let i = aStart;\n          // counts the amount of nodes that are the same in the future\n          let sequence = 1;\n          while (++i < aEnd && i < bEnd && map.get(a[i]) === (index + sequence))\n            sequence++;\n          // effort decision here: if the sequence is longer than replaces\n          // needed to reach such sequence, which would brings again this loop\n          // to the fast path, prepend the difference before a sequence,\n          // and move only the future list index forward, so that aStart\n          // and bStart will be aligned again, hence on the fast path.\n          // An example considering aStart and bStart are both 0:\n          // a: [1, 2, 3, 4]\n          // b: [7, 1, 2, 3, 6]\n          // this would place 7 before 1 and, from that time on, 1, 2, and 3\n          // will be processed at zero cost\n          if (sequence > (index - bStart)) {\n            const node = get(a[aStart], 0);\n            while (bStart < index)\n              parentNode.insertBefore(get(b[bStart++], 1), node);\n          }\n          // if the effort wasn't good enough, fallback to a replace,\n          // moving both source and target indexes forward, hoping that some\n          // similar node will be found later on, to go back to the fast path\n          else {\n            parentNode.replaceChild(\n              get(b[bStart++], 1),\n              get(a[aStart++], -1)\n            );\n          }\n        }\n        // otherwise move the source forward, 'cause there's nothing to do\n        else\n          aStart++;\n      }\n      // this node has no meaning in the future list, so it's more than safe\n      // to remove it, and check the next live node out instead, meaning\n      // that only the live list index should be forwarded\n      else\n        parentNode.removeChild(get(a[aStart++], -1));\n    }\n  }\n  return b;\n};\n","import {isArray} from 'uarray';\n\nexport const aria = node => value => {\n  for (const key in value)\n    node.setAttribute(key === 'role' ? key : `aria-${key}`, value[key]);\n};\n\nexport const attribute = (node, name) => {\n  let oldValue, orphan = true;\n  const attributeNode = document.createAttribute(name);\n  return newValue => {\n    if (oldValue !== newValue) {\n      oldValue = newValue;\n      if (oldValue == null) {\n        if (!orphan) {\n          node.removeAttributeNode(attributeNode);\n          orphan = true;\n        }\n      }\n      else {\n        attributeNode.value = newValue;\n        if (orphan) {\n          node.setAttributeNode(attributeNode);\n          orphan = false;\n        }\n      }\n    }\n  };\n};\n\nexport const data = ({dataset}) => value => {\n  for (const key in value)\n    dataset[key] = value[key];\n};\n\nexport const event = (node, name) => {\n  let oldValue, type = name.slice(2);\n  if (!(name in node) && name.toLowerCase() in node)\n    type = type.toLowerCase();\n  return newValue => {\n    const info = isArray(newValue) ? newValue : [newValue, false];\n    if (oldValue !== info[0]) {\n      if (oldValue)\n        node.removeEventListener(type, oldValue, info[1]);\n      if (oldValue = info[0])\n        node.addEventListener(type, oldValue, info[1]);\n    }\n  };\n};\n\nexport const ref = node => value => {\n  if (typeof value === 'function')\n    value(node);\n  else\n    value.current = node;\n};\n\nexport const setter = (node, key) => value => {\n  node[key] = value;\n};\n\nexport const text = node => {\n  let oldValue;\n  return newValue => {\n    if (oldValue != newValue) {\n      oldValue = newValue;\n      node.textContent = newValue == null ? '' : newValue;\n    }\n  };\n};\n","import umap from 'umap';\nimport instrument from 'uparser';\nimport {isArray} from 'uarray';\nimport {persistent} from 'uwire';\n\nimport {handlers} from './handlers.js';\nimport {createFragment, createPath, createWalker, importNode} from './node.js';\n\n// the prefix is used to identify either comments, attributes, or nodes\n// that contain the related unique id. In the attribute cases\n// isµX=\"attribute-name\" will be used to map current X update to that\n// attribute name, while comments will be like <!--isµX-->, to map\n// the update to that specific comment node, hence its parent.\n// style and textarea will have <!--isµX--> text content, and are handled\n// directly through text-only updates.\nconst prefix = 'isµ';\n\n// Template Literals are unique per scope and static, meaning a template\n// should be parsed once, and once only, as it will always represent the same\n// content, within the exact same amount of updates each time.\n// This cache relates each template to its unique content and updates.\nconst cache = umap(new WeakMap);\n\nexport const createCache = () => ({\n  stack: [],    // each template gets a stack for each interpolation \"hole\"\n\n  entry: null,  // each entry contains details, such as:\n                //  * the template that is representing\n                //  * the type of node it represents (html or svg)\n                //  * the content fragment with all nodes\n                //  * the list of updates per each node (template holes)\n                //  * the \"wired\" node or fragment that will get updates\n                // if the template or type are different from the previous one\n                // the entry gets re-created each time\n\n  wire: null    // each rendered node represent some wired content and\n                // this reference to the latest one. If different, the node\n                // will be cleaned up and the new \"wire\" will be appended\n});\n\n// the entry stored in the rendered node cache, and per each \"hole\"\nconst createEntry = (type, template) => {\n  const {content, updates} = mapUpdates(type, template);\n  return {type, template, content, updates, wire: null};\n};\n\n// a template is instrumented to be able to retrieve where updates are needed.\n// Each unique template becomes a fragment, cloned once per each other\n// operation based on the same template, i.e. data => html`<p>${data}</p>`\nconst mapTemplate = (type, template) => {\n  const text = instrument(template, prefix, type === 'svg');\n  const content = createFragment(text, type);\n  // once instrumented and reproduced as fragment, it's crawled\n  // to find out where each update is in the fragment tree\n  const tw = createWalker(content);\n  const nodes = [];\n  const length = template.length - 1;\n  let i = 0;\n  // updates are searched via unique names, linearly increased across the tree\n  // <div isµ0=\"attr\" isµ1=\"other\"><!--isµ2--><style><!--isµ3--</style></div>\n  let search = `${prefix}${i}`;\n  while (i < length) {\n    const node = tw.nextNode();\n    // if not all updates are bound but there's nothing else to crawl\n    // it means that there is something wrong with the template.\n    if (!node)\n      throw `bad template: ${text}`;\n    // if the current node is a comment, and it contains isµX\n    // it means the update should take care of any content\n    if (node.nodeType === 8) {\n      // The only comments to be considered are those\n      // which content is exactly the same as the searched one.\n      if (node.textContent === search) {\n        nodes.push({type: 'node', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n    else {\n      // if the node is not a comment, loop through all its attributes\n      // named isµX and relate attribute updates to this node and the\n      // attribute name, retrieved through node.getAttribute(\"isµX\")\n      // the isµX attribute will be removed as irrelevant for the layout\n      while (node.hasAttribute(search)) {\n        nodes.push({\n          type: 'attr',\n          path: createPath(node),\n          name: node.getAttribute(search),\n        });\n        node.removeAttribute(search);\n        search = `${prefix}${++i}`;\n      }\n      // if the node was a style or a textarea one, check its content\n      // and if it is <!--isµX--> then update tex-only this node\n      if (\n        /^(?:style|textarea)$/i.test(node.tagName) &&\n        node.textContent.trim() === `<!--${search}-->`\n      ){\n        nodes.push({type: 'text', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n  }\n  // once all nodes to update, or their attributes, are known, the content\n  // will be cloned in the future to represent the template, and all updates\n  // related to such content retrieved right away without needing to re-crawl\n  // the exact same template, and its content, more than once.\n  return {content, nodes};\n};\n\n// if a template is unknown, perform the previous mapping, otherwise grab\n// its details such as the fragment with all nodes, and updates info.\nconst mapUpdates = (type, template) => {\n  const {content, nodes} = (\n    cache.get(template) ||\n    cache.set(template, mapTemplate(type, template))\n  );\n  // clone deeply the fragment\n  const fragment = importNode.call(document, content, true);\n  // and relate an update handler per each node that needs one\n  const updates = nodes.map(handlers, fragment);\n  // return the fragment and all updates to use within its nodes\n  return {content: fragment, updates};\n};\n\n// as html and svg can be nested calls, but no parent node is known\n// until rendered somewhere, the unroll operation is needed to\n// discover what to do with each interpolation, which will result\n// into an update operation.\nexport const unroll = (info, {type, template, values}) => {\n  const {length} = values;\n  // interpolations can contain holes and arrays, so these need\n  // to be recursively discovered\n  unrollValues(info, values, length);\n  let {entry} = info;\n  // if the cache entry is either null or different from the template\n  // and the type this unroll should resolve, create a new entry\n  // assigning a new content fragment and the list of updates.\n  if (!entry || (entry.template !== template || entry.type !== type))\n    info.entry = (entry = createEntry(type, template));\n  const {content, updates, wire} = entry;\n  // even if the fragment and its nodes is not live yet,\n  // it is already possible to update via interpolations values.\n  for (let i = 0; i < length; i++)\n    updates[i](values[i]);\n  // if the entry was new, or representing a different template or type,\n  // create a new persistent entity to use during diffing.\n  // This is simply a DOM node, when the template has a single container,\n  // as in `<p></p>`, or a \"wire\" in `<p></p><p></p>` and similar cases.\n  return wire || (entry.wire = persistent(content));\n};\n\n// the stack retains, per each interpolation value, the cache\n// related to each interpolation value, or null, if the render\n// was conditional and the value is not special (Array or Hole)\nconst unrollValues = ({stack}, values, length) => {\n  for (let i = 0; i < length; i++) {\n    const hole = values[i];\n    // each Hole gets unrolled and re-assigned as value\n    // so that domdiff will deal with a node/wire, not with a hole\n    if (hole instanceof Hole)\n      values[i] = unroll(\n        stack[i] || (stack[i] = createCache()),\n        hole\n      );\n    // arrays are recursively resolved so that each entry will contain\n    // also a DOM node or a wire, hence it can be diffed if/when needed\n    else if (isArray(hole))\n      unrollValues(\n        stack[i] || (stack[i] = createCache()),\n        hole,\n        hole.length\n      );\n    // if the value is nothing special, the stack doesn't need to retain data\n    // this is useful also to cleanup previously retained data, if the value\n    // was a Hole, or an Array, but not anymore, i.e.:\n    // const update = content => html`<div>${content}</div>`;\n    // update(listOfItems); update(null); update(html`hole`)\n    else\n      stack[i] = null;\n  }\n  if (length < stack.length)\n    stack.splice(length);\n};\n\n/**\n * Holds all details wrappers needed to render the content further on.\n * @constructor\n * @param {string} type The hole type, either `html` or `svg`.\n * @param {string[]} template The template literals used to the define the content.\n * @param {Array} values Zero, one, or more interpolated values to render.\n */\nexport function Hole(type, template, values) {\n  this.type = type;\n  this.template = template;\n  this.values = values;\n};\n","import umap from 'umap';\nimport {Hole, createCache, unroll} from './rabbit.js';\n\nconst {create, defineProperties} = Object;\n\n// each rendered node gets its own cache\nconst cache = umap(new WeakMap);\n\n// both `html` and `svg` template literal tags are polluted\n// with a `for(ref[, id])` and a `node` tag too\nconst tag = type => {\n  // both `html` and `svg` tags have their own cache\n  const keyed = umap(new WeakMap);\n  // keyed operations always re-use the same cache and unroll\n  // the template and its interpolations right away\n  const fixed = cache => (template, ...values) => unroll(\n    cache,\n    {type, template, values}\n  );\n  return defineProperties(\n    // non keyed operations are recognized as instance of Hole\n    // during the \"unroll\", recursively resolved and updated\n    (template, ...values) => new Hole(type, template, values),\n    {\n      for: {\n        // keyed operations need a reference object, usually the parent node\n        // which is showing keyed results, and optionally a unique id per each\n        // related node, handy with JSON results and mutable list of objects\n        // that usually carry a unique identifier\n        value(ref, id) {\n          const memo = keyed.get(ref) || keyed.set(ref, create(null));\n          return memo[id] || (memo[id] = fixed(createCache()));\n        }\n      },\n      node: {\n        // it is possible to create one-off content out of the box via node tag\n        // this might return the single created node, or a fragment with all\n        // nodes present at the root level and, of course, their child nodes\n        value: (template, ...values) => unroll(\n          createCache(),\n          {type, template, values}\n        ).valueOf()\n      }\n    }\n  );\n};\n\nexport const html = tag('html');\n\nexport const svg = tag('svg');\n\n// rendering means understanding what `html` or `svg` tags returned\n// and it relates a specific node to its own unique cache.\n// Each time the content to render changes, the node is cleaned up\n// and the new new content is appended, and if such content is a Hole\n// then it's \"unrolled\" to resolve all its inner nodes.\nexport const render = (where, what) => {\n  const hole = typeof what === 'function' ? what() : what;\n  const info = cache.get(where) || cache.set(where, createCache());\n  const wire = hole instanceof Hole ? unroll(info, hole) : hole;\n  if (wire !== info.wire) {\n    info.wire = wire;\n    where.textContent = '';\n    // valueOf() simply returns the node itself, but in case it was a \"wire\"\n    // it will eventually re-append all nodes to its fragment so that such\n    // fragment can be re-appended many times in a meaningful way\n    // (wires are basically persistent fragments facades with special behavior)\n    where.appendChild(wire.valueOf());\n  }\n  return where;\n};\n","import {render, html, svg} from 'uhtml';\n\nconst {define: defineCustomElement} = customElements;\nconst {create, defineProperties, getOwnPropertyDescriptor, keys} = Object;\n\nconst initialized = new WeakMap;\nconst element = 'element';\n\nconst Class = kind => kind === element ?\n  HTMLElement :\n  document.createElement(kind).constructor\n;\n\nexport {render, html, svg};\n\nexport const define = (tagName, definition) => {\n  const {\n    attachShadow,\n    attributeChanged,\n    connected,\n    disconnected,\n    handleEvent,\n    init,\n    observedAttributes\n  } = definition;\n  const statics = {};\n  const proto = {};\n  const listeners = [];\n  const retype = create(null);\n  for (let k = keys(definition), i = 0, {length} = k; i < length; i++) {\n    const key = k[i];\n    if (/^on/.test(key) && !/Options$/.test(key)) {\n      const options = definition[key + 'Options'] || false;\n      const lower = key.toLowerCase();\n      let type = lower.slice(2);\n      listeners.push({type, options});\n      retype[type] = key;\n      if (lower !== key) {\n        type = lower.slice(2, 3) + key.slice(3);\n        retype[type] = key;\n        listeners.push({type, options});\n      }\n    }\n    switch (key) {\n      case 'attachShadow':\n      case 'observedAttributes':\n        break;\n      default:\n        proto[key] = getOwnPropertyDescriptor(definition, key);\n    }\n  }\n  const {length} = listeners;\n  if (length && !handleEvent)\n    proto.handleEvent = {value(event) {\n      this[retype[event.type]](event);\n    }};\n\n  if (observedAttributes)\n    statics.observedAttributes = {value: observedAttributes};\n  proto.attributeChangedCallback =  {value() {\n    bootstrap(this);\n    if (attributeChanged)\n      attributeChanged.apply(this, arguments);\n  }};\n\n  proto.connectedCallback = {value() {\n    bootstrap(this);\n    if (connected)\n      connected.apply(this, arguments);\n  }};\n\n  if (disconnected)\n    proto.disconnectedCallback = {value: disconnected};\n\n  const kind = definition.extends || element;\n  class MicroElement extends Class(kind) {};\n  defineProperties(MicroElement, statics);\n  defineProperties(MicroElement.prototype, proto);\n  const args = [tagName, MicroElement];\n  if (kind !== element)\n    args.push({extends: kind});\n  defineCustomElement.apply(customElements, args);\n  function bootstrap(element) {\n    if (!initialized.has(element)) {\n      initialized.set(element, 0);\n      defineProperties(element, {html: {\n        value: content.bind(\n          attachShadow ? element.attachShadow(attachShadow) : element\n        )\n      }});\n      for (let i = 0; i < length; i++) {\n        const {type, options} = listeners[i];\n        element.addEventListener(type, element, options);\n      }\n      if (init)\n        init.call(element);\n    }\n  }\n};\n\nfunction content() {\n  return render(this, html.apply(null, arguments));\n}\n","import { define } from \"uce\";\nimport style from \"./uce-counter.css\";\n\ndefine(\"uce-counter\", {\n  attachShadow: { mode: \"open\" },\n  init() {\n    this.render();\n  },\n  observedAttributes: [\"count\"],\n  attributeChanged(name, oldValue, newValue) {\n    this.render();\n    this.dispatchEvent(new Event(\"ChangeCount\"));\n  },\n\n  get count() {\n    return Number(this.getAttribute(\"count\"));\n  },\n  set count(newValue) {\n    this.setAttribute(\"count\", newValue);\n  },\n  render() {\n    this.html`\n      <style>${style}</style>\n      <button onclick=\"${() => this.count--}\">-</button>\n      <span>${this.count}</span>\n      <button onclick=\"${() => this.count++}\">+</button>\n    `;\n  },\n});\n"],"names":["_","get","key","set","value","attr","empty","node","notNode","selfClosing","trimEnd","isNode","template","i","test","regular","original","name","extra","replace","isArray","Array","indexOf","slice","diffable","operation","nodeType","firstChild","lastChild","range","document","createRange","setStartAfter","setEndAfter","deleteContents","remove","valueOf","createContent","createHTML","create","html","innerHTML","content","childNodes","selector","RegExp","$1","querySelectorAll","append","markup","type","createSVG","root","length","appendChild","element","createDocumentFragment","createElementNS","svg","reducePath","createPath","path","parentNode","push","call","createTreeWalker","importNode","IE","createFragment","text","createWalker","fragment","diff","comment","oldNodes","newNodes","a","b","before","bLength","aEnd","bEnd","aStart","bStart","map","nextSibling","insertBefore","has","removeChild","Map","index","sequence","replaceChild","udomdiff","handleAttribute","current","ref","setAttribute","aria","dataset","data","setter","oldValue","toLowerCase","newValue","info","removeEventListener","addEventListener","event","orphan","attributeNode","createAttribute","removeAttributeNode","setAttributeNode","attribute","handlers","options","reduceRight","this","nodes","anyContent","textContent","createTextNode","String","handleAnything","cache","umap","WeakMap","mapTemplate","prefix","chunk","$2","output","join","trim","instrument","tw","search","nextNode","hasAttribute","getAttribute","removeAttribute","tagName","mapUpdates","updates","unroll","values","unrollValues","entry","wire","createEntry","ELEMENT_NODE","persistent","stack","hole","Hole","splice","defineProperties","Object","tag","keyed","for","id","memo","fixed","render","where","what","define","defineCustomElement","customElements","getOwnPropertyDescriptor","keys","initialized","apply","arguments","definition","attachShadow","attributeChanged","connected","disconnected","handleEvent","init","observedAttributes","statics","proto","listeners","retype","k","lower","attributeChangedCallback","bootstrap","connectedCallback","disconnectedCallback","kind","extends","MicroElement","HTMLElement","createElement","constructor","Class","prototype","args","bind","mode","dispatchEvent","Event","Number","count"],"mappings":"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"}